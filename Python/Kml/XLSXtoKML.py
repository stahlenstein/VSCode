# pip install simplekml
# pip install pandas
# pip install openpyxl

import simplekml
import pandas as pd

# create a dictionary of the folders and their associated routes
folders = {
    'Silver Creek': [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29],
    'Lindale': [21, 22, 30, 31, 32, 33],
    'Kingston': [42, 43, 44, 45, 46, 47],
    'Shannon': [50, 51, 52, 53, 61, 62],
    'Armuchee': [68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 88],
    'Coosa': [80, 81, 82, 83, 84, 85, 91]
}

# read in the Excel file using pandas
df = pd.read_excel(r'C:\Users\Marvin\Documents\VSCode\Python\Kml\GPS.xlsx')

# convert the "Account Number" column to string values
df['Account Number'] = df['Account Number'].astype(pd.StringDtype())

# Remove deciaml and decimal numerical value from the "Account Number" column
df['Account'] = df['Account Number'].str.replace(".0", "", regex=False)

# add leading zeros to 'Account' column
df['Account'] = df['Account'].apply('{:0>6}'.format)

# create a kml object
kml = simplekml.Kml(name='Meters')

# Adding the screen overlay
screen = kml.newscreenoverlay(name='Panel')
screen.icon.href = 'https://raw.githubusercontent.com/stahlenstein/Map_Beta/main/images/logo.png'
screen.description = 'Last Updated: 03/16/2022 09:30'
screen.overlayxy = simplekml.OverlayXY(x=0,y=1,xunits=simplekml.Units.fraction, yunits=simplekml.Units.fraction)
screen.screenxy = simplekml.ScreenXY(x=25,y=25,xunits=simplekml.Units.pixels, yunits=simplekml.Units.insetpixels)
screen.size.x = 0
screen.size.y = 0
screen.size.xunits = simplekml.Units.fraction
screen.size.yunits = simplekml.Units.fraction

# iterate over each folder in the dictionary
for folder_name, folder_routes in folders.items():
    # create a folder for the current folder name
    kml_folder = kml.newfolder(name=folder_name)
    # iterate over each route number in the current folder
    for route in folder_routes:
        # create a folder for the current route number
        route_folder = kml_folder.newfolder(name=str(route))
        # iterate over each row in the dataframe where the route number matches the current route

        for index, row in df[df['Route'] == route].iterrows():
            # create a placemark with the latitude, longitude, and name from the dataframe
            placemark = route_folder.newpoint(name= row['Address'], description=(f"\n Account #: {row['Account']} \n Meter #: {row['Meter Number']} \n Route: {row['Route']} \n"), coords=[(row['Longitude'], row['Latitude'])])
            placemark.visibility=0

# Styles
placemark.labelstyle.color= 'f3f4f4ff'
placemark.labelstyle.scale= .75

pol = kml.newpolygon(name='County Border')

pol.outerboundaryis = [(-85.099753,34.587416),
(-85.088525,34.587322),
(-85.086267,34.587303),
(-85.079947,34.58725),
(-85.069159,34.587184),
(-85.069295,34.575035),
(-85.064169,34.574886),
(-85.063507,34.542548),
(-85.077003,34.542245),
(-85.089997,34.541915),
(-85.090067,34.463527),
(-85.111361,34.46338),
(-85.112096,34.461684),
(-85.11146,34.460905),
(-85.110022,34.459761),
(-85.109165,34.459853),
(-85.102611,34.453489),
(-85.10197,34.452269),
(-85.101227,34.450696),
(-85.101392,34.447422),
(-85.101944,34.446277),
(-85.10175,34.444629),
(-85.099206,34.442591),
(-85.097631,34.442546),
(-85.095107,34.440928),
(-85.0895,34.427664),
(-85.088947,34.425168),
(-85.088648,34.42498),
(-85.090423,34.423929),
(-85.098049,34.422406),
(-85.100221,34.421356),
(-85.107121,34.415672),
(-85.107774,34.41094),
(-85.10535,34.405342),
(-85.104444,34.404278),
(-85.10065,34.404037),
(-85.087946,34.401273),
(-85.041831,34.401326),
(-85.039036,34.40133),
(-85.033801,34.401354),
(-85.032849,34.401333),
(-85.031701,34.401307),
(-85.031714,34.399792),
(-85.026873,34.399644),
(-85.027031,34.393993),
(-85.023497,34.392176),
(-85.023782,34.391754),
(-85.020557,34.391096),
(-85.01893,34.392316),
(-85.005775,34.392446),
(-85.005609,34.369247),
(-85.005235,34.34708),
(-85.006979,34.347082),
(-85.023102,34.347112),
(-85.023296,34.317066),
(-85.023218,34.30505),
(-85.023371,34.291966),
(-85.023356,34.28777),
(-85.023539,34.278524),
(-85.0236,34.276624),
(-85.023661,34.275457),
(-85.023783,34.267324),
(-85.023813,34.265737),
(-85.023844,34.26428),
(-85.023891,34.258289),
(-85.015528,34.258206),
(-85.015606,34.251131),
(-85.023947,34.251201),
(-85.024103,34.246359),
(-85.023813,34.213385),
(-85.044658,34.213622),
(-85.044887,34.207351),
(-85.045249,34.183849),
(-85.045285,34.167643),
(-85.045638,34.152219),
(-85.045659,34.151425),
(-85.045873,34.143532),
(-85.04642,34.11828),
(-85.046427,34.117913),
(-85.046871,34.096412),
(-85.060233,34.096483),
(-85.121958,34.09675),
(-85.122074,34.093663),
(-85.122472,34.083145),
(-85.150409,34.083409),
(-85.157522,34.083463),
(-85.15736,34.097267),
(-85.210034,34.097623),
(-85.210039,34.100318),
(-85.233334,34.100532),
(-85.257624,34.100668),
(-85.25807,34.079133),
(-85.262905,34.079172),
(-85.283427,34.079394),
(-85.353315,34.080239),
(-85.421853,34.080822),
(-85.428222,34.114397),
(-85.42947,34.125096),
(-85.432896,34.141913),
(-85.440864,34.181022),
(-85.444715,34.199927),
(-85.455057,34.250689),
(-85.455371,34.252854),
(-85.458071,34.265736),
(-85.458693,34.269437),
(-85.462082,34.286386),
(-85.435204,34.286334),
(-85.396247,34.286182),
(-85.387351,34.286097),
(-85.383028,34.291922),
(-85.37944,34.295286),
(-85.378391,34.297356),
(-85.378958,34.298798),
(-85.382391,34.300907),
(-85.382799,34.301443),
(-85.382818,34.303283),
(-85.379394,34.309061),
(-85.377109,34.31148),
(-85.376151,34.31326),
(-85.373619,34.318445),
(-85.372847,34.322605),
(-85.369285,34.326367),
(-85.363303,34.338336),
(-85.360621,34.339416),
(-85.353694,34.346095),
(-85.351985,34.348),
(-85.348983,34.353675),
(-85.346724,34.356248),
(-85.335937,34.368902),
(-85.325115,34.374463),
(-85.317117,34.376451),
(-85.311197,34.379535),
(-85.301703,34.382706),
(-85.299465,34.384702),
(-85.281435,34.389729),
(-85.273908,34.39378),
(-85.272017,34.393681),
(-85.266385,34.395217),
(-85.265399,34.395644),
(-85.26366,34.39865),
(-85.252211,34.402614),
(-85.249087,34.408195),
(-85.241444,34.408395),
(-85.241333,34.415518),
(-85.233568,34.415521),
(-85.222437,34.415534),
(-85.22231,34.420806),
(-85.218049,34.422654),
(-85.21648,34.422723),
(-85.214566,34.422807),
(-85.215078,34.429586),
(-85.204714,34.429335),
(-85.203016,34.431483),
(-85.201445,34.431798),
(-85.201032,34.431881),
(-85.191535,34.433789),
(-85.180548,34.435996),
(-85.178943,34.438528),
(-85.178813,34.440946),
(-85.177175,34.445034),
(-85.170942,34.453337),
(-85.169528,34.456344),
(-85.162853,34.472321),
(-85.160931,34.478908),
(-85.16079,34.481823),
(-85.159342,34.488317),
(-85.156564,34.495539),
(-85.15255,34.500786),
(-85.14765,34.514985),
(-85.141687,34.524808),
(-85.134449,34.535385),
(-85.124649,34.550885),
(-85.119649,34.563484),
(-85.116449,34.569984),
(-85.115249,34.571184),
(-85.114549,34.574784),
(-85.107748,34.587483),
(-85.099753,34.587416),
]

# pol.innerboundaryis = [(18.347171,-34.040177), (18.355741,-34.039730),
#                        (18.350467,-34.048388),(18.347171,-34.040177)]

pol.style.linestyle.color = 'ff0000ff'
pol.style.linestyle.width = 3
pol.style.polystyle.color = simplekml.Color.changealphaint(0, 'ff0000ff')

kml.save('meters.kml')
